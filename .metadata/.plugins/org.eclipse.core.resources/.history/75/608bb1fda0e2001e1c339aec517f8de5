package com.library.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.carrotcake.exception.UserNotFoundException;
import com.library.repository.UserRepository; 
import com.library.model.Users; 

import java.util.List;
import java.util.Optional;

@Service
@Transactional
public class UserService {

    @Autowired 
    private UserRepository userRepository; 
    
    public Users findByNameAndPsw(String name, String password) {
        return userRepository.findByNameAndPassword(name, password);
    }

    public List<Users> findAllUsers() {
        return userRepository.findAll();
    }

    public Users findByName(String username) {
        Optional<Users> uResp = userRepository.findByName(username);
        if(uResp.isEmpty()) {
            throw new UsernameNotFoundException("Can't find user."); 
        }
        return uResp.get();
    }

    public Users saveUser(Users user) {
        return userRepository.save(user); 
    }

    public boolean existsByUsername(String username) {
        return userRepository.existsByName(username); // Changed from member to user
    }

    public void deleteUser(int userId) {
        userRepository.deleteById(userId); // Changed from member to user
    }

    public Users getUserById(int userId) {
        Optional<Users> optionalUser = userRepository.findById(userId); // Changed from member to user

        if (optionalUser.isPresent()) {
            return optionalUser.get();
        } else {
            throw new UserNotFoundException("User not found with ID: " + userId); // Changed from member to user
        }
    }
}
